# generated by mBlock5 for CyberPi

# codes make you happy

import random, cyberpi, event, time

# === Initialize Variables ===
num1 = num2 = answer = wrong_num = score = 0
operator = true_answer = restart = 0
sprite_test = cyberpi.sprite()
sprite_answer_1 = cyberpi.sprite()
sprite_answer_2 = cyberpi.sprite()
sprite_answer_3 = cyberpi.sprite()
sprite_score = cyberpi.sprite()

@event.start
def on_start():
    global score, restart

    cyberpi.background.fill(0, 0, 0)
    score = 0
    restart = 'OFF'
    cyberpi.audio.set_vol(30)

    sprite_score.draw_text('score:')
    sprite_score.set_brush(255, 233, 0)
    sprite_score.set_align("top_left")
    sprite_score.move_to(5, 5)

    sprite_test.set_align("mid_left")
    sprite_test.move_to(0, 64)
    sprite_test.set_brush(0, 242, 255)

    sprite_answer_1.set_brush(0, 242, 255)
    sprite_answer_2.set_brush(0, 242, 255)
    sprite_answer_3.set_brush(0, 255, 255)

    new_test()

    while True:
        while restart != 'ON':
            # Move answers to the left randomly
            sprite_answer_1.move_x(random.randint(1, 4) * -1)
            sprite_answer_2.move_x(random.randint(1, 4) * -1)
            sprite_answer_3.move_x(random.randint(1, 4) * -1)

            # Control sprite_test up/down
            if cyberpi.controller.is_press('down'):
                sprite_test.move_y(6)
            if cyberpi.controller.is_press('up'):
                sprite_test.move_y(-6)

            # Check if player collides with any answer
            if sprite_test.is_touch(sprite_answer_1):
                cyberpi.broadcast('get_score' if true_answer == 1 else 'wrong')
                restart = 'ON'

            elif sprite_test.is_touch(sprite_answer_2):
                cyberpi.broadcast('get_score' if true_answer == 2 else 'wrong')
                restart = 'ON'

            elif sprite_test.is_touch(sprite_answer_3):
                cyberpi.broadcast('get_score' if true_answer == 3 else 'wrong')
                restart = 'ON'

            # Missed all
            if sprite_answer_1.get_x() < 0:
                restart = 'ON'

            time.sleep(0.1)
            cyberpi.screen.render()

        restart = 'OFF'
        new_test()

# === Score Event ===
@event.receive('get_score')
def on_get_score():
    global score
    cyberpi.audio.play_until('right')
    score += 1
    sprite_score.draw_text('score:' + str(score))

# === Wrong Event ===
@event.receive('wrong')
def on_wrong():
    cyberpi.audio.play_until('wrong')
    sprite_score.draw_text('score:' + str(score))

# === New Math Test ===
def new_test():
    global num1, num2, answer, true_answer, operator

    sprite_test.clear()
    sprite_answer_1.clear()
    sprite_answer_2.clear()
    sprite_answer_3.clear()

    num1 = random.randint(1, 9)
    num2 = random.randint(1, 9)
    operator_type = random.randint(1, 4)

    if operator_type == 1:
        operator = '+'
        answer = num1 + num2
        sprite_test.draw_text(f"{num1}+{num2}=")

    elif operator_type == 2:
        operator = '-'
        if num1 >= num2:
            answer = num1 - num2
            sprite_test.draw_text(f"{num1}-{num2}=")
        else:
            answer = num2 - num1
            sprite_test.draw_text(f"{num2}-{num1}=")

    elif operator_type == 3:
        operator = '*'
        answer = num1 * num2
        sprite_test.draw_text(f"{num1}*{num2}=")

    elif operator_type == 4:
        operator = '/'
        answer = num2
        sprite_test.draw_text(f"{num1*num2}/{num1}=")

    # Generate 2 wrong answers
    choices = []
    while len(choices) < 2:
        wrong = random.randint(0, 81)
        if wrong != answer and wrong not in choices:
            choices.append(wrong)

    # Insert correct answer into a random position
    true_answer = random.randint(1, 3)
    if true_answer == 1:
        sprite_answer_1.draw_text(str(answer))
        sprite_answer_2.draw_text(str(choices[0]))
        sprite_answer_3.draw_text(str(choices[1]))
    elif true_answer == 2:
        sprite_answer_1.draw_text(str(choices[0]))
        sprite_answer_2.draw_text(str(answer))
        sprite_answer_3.draw_text(str(choices[1]))
    else:
        sprite_answer_1.draw_text(str(choices[0]))
        sprite_answer_2.draw_text(str(choices[1]))
        sprite_answer_3.draw_text(str(answer))

    # Random position for each answer
    sprite_answer_1.move_to(random.randint(100, 128), random.randint(15, 47))
    sprite_answer_2.move_to(random.randint(100, 128), random.randint(47, 79))
    sprite_answer_3.move_to(random.randint(100, 128), random.randint(79, 111))

    cyberpi.screen.render()
