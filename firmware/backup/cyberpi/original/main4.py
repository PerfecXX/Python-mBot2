# generated by mBlock5 for CyberPi
# codes make you happy

import math, random, event, time, cyberpi

# Initialize variables
led_id = 0
red = 0
green = 0
blue = 0
j = 0
f = 0
k = 0

@event.start
def on_start():
    global led_id, red, green, blue, j, f, k

    cyberpi.console.clear()

    if cyberpi.get_language() == 'chinese':
        cyberpi.console.println('流光溢彩')
    else:
        cyberpi.console.println('Trigonometric function line')

    time.sleep(1)
    cyberpi.led.set_bri(30)

    j = 0
    f = 0
    k = 0

    while True:
        led_id = 1

        # Display RGB values as linecharts
        cyberpi.display.set_brush(255, 0, 0)
        cyberpi.linechart.add(red / 2)

        cyberpi.display.set_brush(55, 255, 0)
        cyberpi.linechart.add(green / 2)

        cyberpi.display.set_brush(0, 33, 255)
        cyberpi.linechart.add(blue / 2)

        # LED color animation loop
        for count in range(5):
            # Generate phase-shifted angles for color variation
            red = (led_id / 2 + k / 4)
            green = ((led_id / 1 + j / 9) + 2.1)
            blue = ((led_id / 3 + f / 14) + 4.2)

            # Convert to RGB using sine functions
            # Note: Convert from degrees to radians for math.sin
            red = 100 * (1 + math.sin((red / 3.14) * math.pi))
            green = 100 * (1 + math.sin((green / 3.14) * math.pi))
            blue = 100 * (1 + math.sin((blue / 3.14) * math.pi))

            # Apply RGB to specific LED
            cyberpi.led.on(red, green, blue, led_id)
            led_id += 1

            # Use random values to create non-repetitive smooth variation
            j += random.randint(1, 6) / 6
            k += random.randint(1, 6) / 6
            f += random.randint(1, 6) / 6
